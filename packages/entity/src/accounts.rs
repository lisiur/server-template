//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "accounts")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub user_id: Uuid,
    pub name: String,
    pub kind: String,
    pub balance: i32,
    pub currency: String,
    pub corrected_balance: i32,
    pub corrected_at: DateTimeWithTimeZone,
    pub is_deleted: bool,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::relation_account_books_accounts::Entity")]
    RelationAccountBooksAccounts,
}

impl Related<super::relation_account_books_accounts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RelationAccountBooksAccounts.def()
    }
}

impl Related<super::account_books::Entity> for Entity {
    fn to() -> RelationDef {
        super::relation_account_books_accounts::Relation::AccountBooks.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::relation_account_books_accounts::Relation::Accounts
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
