//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "departments")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: String,
    pub description: Option<String>,
    pub parent_id: Option<Uuid>,
    pub is_deleted: bool,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ParentId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SelfRef,
    #[sea_orm(has_many = "super::relation_permission_groups_departments::Entity")]
    RelationPermissionGroupsDepartments,
    #[sea_orm(has_many = "super::relation_permissions_departments::Entity")]
    RelationPermissionsDepartments,
    #[sea_orm(has_many = "super::relation_role_groups_departments::Entity")]
    RelationRoleGroupsDepartments,
    #[sea_orm(has_many = "super::relation_roles_departments::Entity")]
    RelationRolesDepartments,
    #[sea_orm(has_many = "super::relation_users_departments::Entity")]
    RelationUsersDepartments,
}

impl Related<super::relation_permission_groups_departments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RelationPermissionGroupsDepartments.def()
    }
}

impl Related<super::relation_permissions_departments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RelationPermissionsDepartments.def()
    }
}

impl Related<super::relation_role_groups_departments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RelationRoleGroupsDepartments.def()
    }
}

impl Related<super::relation_roles_departments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RelationRolesDepartments.def()
    }
}

impl Related<super::relation_users_departments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RelationUsersDepartments.def()
    }
}

impl Related<super::permission_groups::Entity> for Entity {
    fn to() -> RelationDef {
        super::relation_permission_groups_departments::Relation::PermissionGroups.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::relation_permission_groups_departments::Relation::Departments
                .def()
                .rev(),
        )
    }
}

impl Related<super::permissions::Entity> for Entity {
    fn to() -> RelationDef {
        super::relation_permissions_departments::Relation::Permissions.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::relation_permissions_departments::Relation::Departments
                .def()
                .rev(),
        )
    }
}

impl Related<super::role_groups::Entity> for Entity {
    fn to() -> RelationDef {
        super::relation_role_groups_departments::Relation::RoleGroups.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::relation_role_groups_departments::Relation::Departments
                .def()
                .rev(),
        )
    }
}

impl Related<super::roles::Entity> for Entity {
    fn to() -> RelationDef {
        super::relation_roles_departments::Relation::Roles.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::relation_roles_departments::Relation::Departments
                .def()
                .rev(),
        )
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        super::relation_users_departments::Relation::Users.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::relation_users_departments::Relation::Departments
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
