//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "relation_role_groups_user_groups")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub role_group_id: Uuid,
    #[sea_orm(primary_key, auto_increment = false)]
    pub user_group_id: Uuid,
    pub is_deleted: bool,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::role_groups::Entity",
        from = "Column::RoleGroupId",
        to = "super::role_groups::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    RoleGroups,
    #[sea_orm(
        belongs_to = "super::user_groups::Entity",
        from = "Column::UserGroupId",
        to = "super::user_groups::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    UserGroups,
}

impl Related<super::role_groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RoleGroups.def()
    }
}

impl Related<super::user_groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserGroups.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
