//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "groups")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: String,
    pub description: Option<String>,
    pub parent_id: Option<Uuid>,
    pub is_deleted: bool,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ParentId",
        to = "Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    SelfRef,
    #[sea_orm(has_many = "super::relation_groups_permissions::Entity")]
    RelationGroupsPermissions,
    #[sea_orm(has_many = "super::relation_groups_roles::Entity")]
    RelationGroupsRoles,
    #[sea_orm(has_many = "super::relation_groups_users::Entity")]
    RelationGroupsUsers,
}

impl Related<super::relation_groups_permissions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RelationGroupsPermissions.def()
    }
}

impl Related<super::relation_groups_roles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RelationGroupsRoles.def()
    }
}

impl Related<super::relation_groups_users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RelationGroupsUsers.def()
    }
}

impl Related<super::permissions::Entity> for Entity {
    fn to() -> RelationDef {
        super::relation_groups_permissions::Relation::Permissions.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::relation_groups_permissions::Relation::Groups
                .def()
                .rev(),
        )
    }
}

impl Related<super::roles::Entity> for Entity {
    fn to() -> RelationDef {
        super::relation_groups_roles::Relation::Roles.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::relation_groups_roles::Relation::Groups.def().rev())
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        super::relation_groups_users::Relation::Users.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::relation_groups_users::Relation::Groups.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
