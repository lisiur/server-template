//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.10

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub account: String,
    pub nickname: Option<String>,
    pub real_name: Option<String>,
    pub phone: Option<String>,
    pub email: Option<String>,
    pub email_verified: bool,
    pub avatar_url: Option<String>,
    pub gender: String,
    pub birthday: Option<Date>,
    pub bio: Option<String>,
    pub password_digest: Option<String>,
    pub last_login: Option<String>,
    pub failed_login_attempts: i16,
    pub is_deleted: bool,
    pub created_at: DateTimeWithTimeZone,
    pub updated_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::relation_permission_groups_users::Entity")]
    RelationPermissionGroupsUsers,
    #[sea_orm(has_many = "super::relation_permissions_users::Entity")]
    RelationPermissionsUsers,
    #[sea_orm(has_many = "super::relation_role_groups_users::Entity")]
    RelationRoleGroupsUsers,
    #[sea_orm(has_many = "super::relation_roles_users::Entity")]
    RelationRolesUsers,
    #[sea_orm(has_many = "super::relation_users_departments::Entity")]
    RelationUsersDepartments,
    #[sea_orm(has_many = "super::relation_users_user_groups::Entity")]
    RelationUsersUserGroups,
}

impl Related<super::relation_permission_groups_users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RelationPermissionGroupsUsers.def()
    }
}

impl Related<super::relation_permissions_users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RelationPermissionsUsers.def()
    }
}

impl Related<super::relation_role_groups_users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RelationRoleGroupsUsers.def()
    }
}

impl Related<super::relation_roles_users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RelationRolesUsers.def()
    }
}

impl Related<super::relation_users_departments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RelationUsersDepartments.def()
    }
}

impl Related<super::relation_users_user_groups::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::RelationUsersUserGroups.def()
    }
}

impl Related<super::departments::Entity> for Entity {
    fn to() -> RelationDef {
        super::relation_users_departments::Relation::Departments.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::relation_users_departments::Relation::Users
                .def()
                .rev(),
        )
    }
}

impl Related<super::permission_groups::Entity> for Entity {
    fn to() -> RelationDef {
        super::relation_permission_groups_users::Relation::PermissionGroups.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::relation_permission_groups_users::Relation::Users
                .def()
                .rev(),
        )
    }
}

impl Related<super::permissions::Entity> for Entity {
    fn to() -> RelationDef {
        super::relation_permissions_users::Relation::Permissions.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::relation_permissions_users::Relation::Users
                .def()
                .rev(),
        )
    }
}

impl Related<super::role_groups::Entity> for Entity {
    fn to() -> RelationDef {
        super::relation_role_groups_users::Relation::RoleGroups.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::relation_role_groups_users::Relation::Users
                .def()
                .rev(),
        )
    }
}

impl Related<super::roles::Entity> for Entity {
    fn to() -> RelationDef {
        super::relation_roles_users::Relation::Roles.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::relation_roles_users::Relation::Users.def().rev())
    }
}

impl Related<super::user_groups::Entity> for Entity {
    fn to() -> RelationDef {
        super::relation_users_user_groups::Relation::UserGroups.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::relation_users_user_groups::Relation::Users
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
